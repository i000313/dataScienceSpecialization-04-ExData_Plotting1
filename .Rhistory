um_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Paulo")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"))
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[x > 0 & !is.na(x)]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11,
| bar = 2, norf = NA)
vect <- c(foo = 11,
bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(data = 1:20, nrow=4, ncol=5)
identical(myMatrix, myMatrix2)
patients <- c("Bil", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- ("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData) <- cnames
myData
search()
df
ok
search()
ok
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x >=1) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
y = NULL
y
g
?ls
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
x <- array(1,2)
x
class(x)
?str
str(tapply)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
chachemaean(c(1,2,3,4,5,6))
cachemaean(c(1,2,3,4,5,6))
cachemean(c(1,2,3,4,5,6))
cachemean(makeVector, c(1,2,3,4,5,6))
cachemean(makeVector(), c(1,2,3,4,5,6))
makeVector()
makeVector(c(1,2,3,4))
cachemean(makeVector(c(1,2,3,4,5,6))
)
?solve
x <- matrix()
class(x)
solve(x)
solve(x, ...)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
solve(matrix(1:9))
solve(matrix(1:9, nrow=3, ncol=3))
matrix(1:9, nrow=3, ncol=3)
?rep
matrix(c(1,1,1,1), nrow=3, ncol=3)
matrix(c(1,1,1,1), nrow=2, ncol=2)
solve(matrix(c(1,1,1,1), nrow=2, ncol=2))
matrix(c(1, 4, 4, 1), ncol=2)
solve(matrix(c(1, 4, 4, 1), ncol=2))
mtx <- makeCacheMatrix(matrix(c(1, 4, 4, 1), ncol=2))
mtx$get()
inv = cacheSolve(mtx)
inv
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
mtx <- makeCacheMatrix(matrix(c(1, 4, 4, 1), ncol=2))
mtx$get()
inv <- cacheSolve()
inv <- cacheSolve(mtx)
mtx$getmean()
m <- mtx$getmean()
is.null(m)
!is.null(m)
message("uh")
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
mtx <- makeCacheMatrix(matrix(c(1, 4, 4, 1), ncol=2))
inv = cacheSolve(mtx)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cacheSolve <- function(x, ...) {
message("entrou")
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
inv = cacheSolve(mtx)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cacheSolve <- function(x, ...) {
#message("entrou")
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
inv = cacheSolve(mtx)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
inv = cacheSolve(mtx)
mtx <- makeCacheMatrix(matrix(c(1, 4, 4, 1), ncol=2))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
mtx <- makeCacheMatrix(matrix(c(1, 4, 4, 1), ncol=2))
inv = cacheSolve(mtx)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
message("ok")
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
inv = cacheSolve(mtx)
cacheSolve <- function(x, ...) {
#message("ok")
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
inv = cacheSolve(mtx)
install.packages('RMySQL',type='source')
library(RMySQL)
library("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
install.packages(“RMySQL”, type = “source”)
install.packages('RMySQL',type='source')
install.packages("RMySQL", type = "source")
Sys.getenv('MYSQL_HOME')
install.packages("RMySQL", type = "source")
con <- dbConnect(MySQL(), host="localhost", port=3306, user="root", password = "")
library(RMySQL)
con <- dbConnect(MySQL(), host="localhost", port=3306, user="root", password = "")
date()
?par
setwd("E:/Os Meus Documentos/Courses/Cousera-DataScienceSpecialization-04ExploratoryDataAnalysis-2014Jun02-Jun30/DataScienceSpecialization-04-ExData_Plotting1")
# Load and preper the dataset
source("load-dataset.R")
# Create plot4
png(filename="plot4.png", width=504, height=504, units="px")
# Set some graphical parameters.
par (mfrow=c(2,2))
with(hpc.df,
{
# 1 of 4
plot(DateTime, Global_active_power
, xlab="", ylab="Global Active Power", type="l")
# 2 of 4
plot(DateTime, Voltage, xlab="datetime", ylab="Voltage", type="l")
# 3 of 4
cols = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(DateTime, Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(DateTime, Sub_metering_2, col="red", type="l")
lines(DateTime, Sub_metering_3, col="blue", type="l")
legend("topright", col=c("black","blue","red"), legend=cols, bty="n", lty=1, lwd=1)
# 3 of 4
plot(DateTime, Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", type="l")
}
)
# shuts down the graphic device
dev.off()
png(filename="plot4.png", width=504, height=504, units="px")
# Set some graphical parameters.
par (mfrow=c(2,2))
#with(hpc.df,
# {
# 1 of 4
plot(hpc.df$DateTime, Global_active_power
, xlab="", ylab="Global Active Power", type="l")
# 2 of 4
plot(hpc.df$DateTime, Voltage, xlab="datetime", ylab="Voltage", type="l")
# 3 of 4
cols = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(hpc.df$DateTime, Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(hpc.df$DateTime, Sub_metering_2, col="red", type="l")
lines(hpc.df$DateTime, Sub_metering_3, col="blue", type="l")
legend("topright", col=c("black","blue","red"), legend=cols, bty="n", lty=1, lwd=1)
# 3 of 4
plot(hpc.df$DateTime, Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", type="l")
#  }
# )
# shuts down the graphic device
dev.off()
source("load-dataset.R")
# Create plot4
png(filename="plot4.png", width=504, height=504, units="px")
# Set some graphical parameters.
par (mfrow=c(2,2))
#with(hpc.df,
# {
# 1 of 4
plot(hpc.df$DateTime, Global_active_power
, xlab="", ylab="Global Active Power", type="l")
# 2 of 4
plot(hpc.df$DateTime, Voltage, xlab="datetime", ylab="Voltage", type="l")
# 3 of 4
cols = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(hpc.df$DateTime, Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(hpc.df$DateTime, Sub_metering_2, col="red", type="l")
lines(hpc.df$DateTime, Sub_metering_3, col="blue", type="l")
legend("topright", col=c("black","blue","red"), legend=cols, bty="n", lty=1, lwd=1)
# 3 of 4
plot(hpc.df$DateTime, Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", type="l")
#  }
# )
# shuts down the graphic device
dev.off()
# Create plot4
png(filename="plot4.png", width=504, height=504, units="px")
# Set some graphical parameters.
par (mfrow=c(2,2))
#with(hpc.df,
# {
# 1 of 4
plot(hpc.df$DateTime, Global_active_power
, xlab="", ylab="Global Active Power", type="l")
# 2 of 4
plot(hpc.df$DateTime, Voltage, xlab="datetime", ylab="Voltage", type="l")
# 3 of 4
cols = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(hpc.df$DateTime, Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(hpc.df$DateTime, Sub_metering_2, col="red", type="l")
lines(hpc.df$DateTime, Sub_metering_3, col="blue", type="l")
legend("topright", col=c("black","blue","red"), legend=cols, bty="n", lty=1, lwd=1)
# 3 of 4
plot(hpc.df$DateTime, Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", type="l")
#  }
# )
# shuts down the graphic device
dev.off()
